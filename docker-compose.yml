# networks:
#   hyperhire_network:
#     driver: bridge

# services:
#   monorepo:
#     build:
#       context: .
#       dockerfile: ./dockerfile
#     container_name: prisma_migrator
#     environment:
#       NODE_ENV: production
#       NEST_DB_HOST: ${NEST_DB_HOST}
#       NEST_DB_PORT: ${NEST_DB_PORT}
#       NEST_DB_DATABASE: ${NEST_DB_DATABASE}
#       NEST_DB_USER: ${NEST_DB_USER}
#       NEST_DB_PASSWORD: ${NEST_DB_PASSWORD}
#       NEST_DB_PRISMA_DATABASE_URL: ${NEST_DB_PRISMA_DATABASE_URL}
#     command: [ "npx", "prisma", "migrate", "deploy" ]
#   backend:
#     build:
#       context: .
#       dockerfile: ./apps/backend-app/dockerfile
#     container_name: nestjs_backend
#     depends_on:
#       - monorepo
#     networks:
#       - hyperhire_network
#     volumes:
#       - .:/app  # ✅ Share monorepo so backend can access root Prisma client
#       - /app/node_modules  # ✅ Prevent overwriting node_modules
#     environment:
#       NODE_ENV: production
#       NEST_APP_PORT: ${NEST_APP_PORT}
#       NEST_APP_HOST: ${NEST_APP_PORT}
#       NEST_APP_ENV: ${NEST_APP_ENV}
#       NEST_APP_DEBUG: ${NEST_APP_DEBUG}
#       NEST_APP_TIMEZONE: ${NEST_APP_TIMEZONE}
#       NEST_APP_LOCALE: ${NEST_APP_LOCALE}
#       NEST_APP_LOG_LEVEL: ${NEST_APP_LOCALE}
#       NEST_APP_GLOBAL_PREFIX: ${NEST_APP_GLOBAL_PREFIX}

#       NEST_DB_HOST: ${NEST_DB_HOST}
#       NEST_DB_PORT: ${NEST_DB_PORT}
#       NEST_DB_DATABASE: ${NEST_DB_DATABASE}
#       NEST_DB_USER: ${NEST_DB_USER}
#       NEST_DB_PASSWORD: ${NEST_DB_PASSWORD}
#       NEST_DB_PRISMA_DATABASE_URL: ${NEST_DB_PRISMA_DATABASE_URL}
#     ports:
#       - ${NEST_APP_PORT}:${NEST_APP_PORT}
#   frontend:
#     build:
#       context: .
#       dockerfile: ./apps/backend-app/dockerfile
#     container_name: frontend_app
#     depends_on:
#       - backend
#     volumes:
#       - .:/app  # ✅ Share monorepo so backend can access root Prisma client
#       - /app/node_modules  # ✅ Prevent overwriting node_modules
#     networks:
#       - hyperhire_network
#     ports:
#       - ${NEXT_JS_PORT}:${NEXT_JS_PORT}

# version: "3.9"

networks:
  hyperhire_network:
    driver: bridge

services:
  # ✅ Prisma Migration Service
  monorepo:
    build:
      context: .
      dockerfile: ./dockerfile
      target: backend_builder  # ✅ Uses built backend stage for migrations
    container_name: prisma_migrator
    environment:
      NODE_ENV: production
      NEST_DB_HOST: ${NEST_DB_HOST}
      NEST_DB_PORT: ${NEST_DB_PORT}
      NEST_DB_DATABASE: ${NEST_DB_DATABASE}
      NEST_DB_USER: ${NEST_DB_USER}
      NEST_DB_PASSWORD: ${NEST_DB_PASSWORD}
      NEST_DB_PRISMA_DATABASE_URL: ${NEST_DB_PRISMA_DATABASE_URL}
    # command: [ "npx", "prisma", "migrate", "deploy" ]
    networks:
      - hyperhire_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "${NEST_DB_HOST}", "-p", "${NEST_DB_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ✅ NestJS Backend Service
  backend:
    build:
      context: .
      dockerfile: ./dockerfile
      target: backend_runner  # ✅ Uses final backend runtime stage
    container_name: nestjs_backend
    depends_on:
      monorepo:
        condition: service_healthy  # ✅ Ensures Prisma migration completes first
    networks:
      - hyperhire_network
    volumes:
      - .:/app  # Share monorepo (but NOT node_modules)
      - /app/node_modules  # Prevent overwriting container node_modules
    environment:
      NODE_ENV: production
      NEST_APP_PORT: ${NEST_APP_PORT}
      NEST_APP_HOST: 0.0.0.0  # ✅ Set correct host binding
      NEST_APP_ENV: ${NEST_APP_ENV}
      NEST_APP_DEBUG: ${NEST_APP_DEBUG}
      NEST_APP_TIMEZONE: ${NEST_APP_TIMEZONE}
      NEST_APP_LOCALE: ${NEST_APP_LOCALE}
      NEST_APP_LOG_LEVEL: ${NEST_APP_LOG_LEVEL}
      NEST_APP_GLOBAL_PREFIX: ${NEST_APP_GLOBAL_PREFIX}

      NEST_DB_HOST: ${NEST_DB_HOST}
      NEST_DB_PORT: ${NEST_DB_PORT}
      NEST_DB_DATABASE: ${NEST_DB_DATABASE}
      NEST_DB_USER: ${NEST_DB_USER}
      NEST_DB_PASSWORD: ${NEST_DB_PASSWORD}
      NEST_DB_PRISMA_DATABASE_URL: ${NEST_DB_PRISMA_DATABASE_URL}
    ports:
      - "${NEST_APP_PORT}:${NEST_APP_PORT}"
    restart: unless-stopped

  # ✅ Next.js Frontend Service
  frontend:
    build:
      context: .
      dockerfile: ./dockerfile
      target: frontend_runner  # ✅ Uses final frontend runtime stage
    container_name: frontend_app
    depends_on:
      backend:
        condition: service_started
    volumes:
      - .:/app  # Share monorepo (but NOT node_modules)
      - /app/node_modules  # Prevent overwriting container node_modules
    networks:
      - hyperhire_network
    ports:
      - "${NEXT_JS_PORT}:${NEXT_JS_PORT}"
    restart: unless-stopped
